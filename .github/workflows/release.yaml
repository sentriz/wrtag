name: Release
on:
  push:
    branches:
      - master
jobs:
  test:
    name: Lint and test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60
      - name: Test
        run: go test ./...
  release-please:
    name: Run Release Please
    runs-on: ubuntu-latest
    needs: [test]
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Release Please
        uses: google-github-actions/release-please-action@v2
        id: release
        with:
          token: ${{ secrets.CR_PAT }}
          release-type: simple
          changelog-path: CHANGELOG.md
          package-name: wrtag
  build-binaries:
    name: Build binaries
    runs-on: ubuntu-latest
    needs: [release-please]
    if: ${{ needs.release-please.outputs.release_created }}
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64, 386]
        exclude:
          - os: darwin
            arch: 386
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Build
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          CGO_ENABLED=0 GOOS="$os" GOARCH="$arch" go build -o out/ ./cmd/...
          cd out/
          for p in *; do
            mv "$p" "$p-${{ matrix.os }}-${{ matrix.arch }}"
          done
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.os }}-${{ matrix.arch }}
          path: out/*
  build-docker:
    name: Build, tag, and publish Docker image
    runs-on: ubuntu-latest
    needs: [release-please]
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:master
      - name: Login into DockerHub
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Login into GitHub Container Registry
        run: echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.release-please.outputs.tag_name }}
            ghcr.io/${{ github.repository }}:latest
            ${{ github.repository }}:${{ needs.release-please.outputs.tag_name }}
            ${{ github.repository }}:latest
