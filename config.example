# path-format is rooted in your destination music dir. the template is fed with musicbrainz release data
# see go.senan.xyz/wrtag/musicbrainz for type definitions

#path-format /mnt/music/albums/{{ artists .Release.Artists | sort | join "; " | safepath }}/({{ .Release.ReleaseGroup.FirstReleaseDate.Year }}) {{ .Release.Title | safepath }}{{ if not (eq .ReleaseDisambiguation "") }} ({{ .ReleaseDisambiguation | safepath }}){{ end }}/{{ pad0 2 .TrackNum }}.{{ len .Tracks | pad0 2 }} {{ if .IsCompilation }}{{ artistsString .Track.Artists | safepath }} - {{ end }}{{ .Track.Title | safepath }}{{ .Ext }}

# search links are shortcuts on for the ui to help research data, and populate missing musicbrainz data. the template is fed with tag data
# see go.senan.xyz/tags/tagcommon for type definitions

#research-link kagi https://kagi.com/search?l=4&q={{ printf "%s %s" .Artist .Album | urlquery }}
#research-link juno https://www.junodownload.com/search/?q%5Ball%5D%5B%5D={{ printf "%s %s" .Artist .Album | urlquery }}
#research-link deezer https://www.deezer.com/search/{{ printf "%s %s" .Artist .Album | urlquery }}
#research-link harmony https://harmony.pulsewidth.org.uk/release?url=&gtin={{ .Barcode | urlquery }}&region=&deezer=&itunes=&spotify=&tidal=&beatport=
#research-link musicbrainz https://musicbrainz.org/taglookup?tag-lookup.artist={{ .Artist | urlquery }}&tag-lookup.release={{ .Album | urlquery }}
#research-link discogs https://www.discogs.com/search/?type=release&q={{ printf "%s %s" .Artist .Album | urlquery }}&barcode={{ .Barcode | urlquery }}
#research-link google https://www.google.com/search?q={{ printf "%s %s" .Artist .Album | urlquery }}
#research-link google-shopping https://www.google.com/search?tbm=shop&q={{ .Barcode | urlquery }}
#research-link rateyourmusic https://rateyourmusic.com/search?searchterm={{ printf "%s %s" .Artist .Album | urlquery }}&searchtype=l
#research-link lastfm https://www.last.fm/search?q={{ printf "%s %s" .Artist .Album | urlquery }}
#research-link bandcamp https://bandcamp.com/search?q={{ printf "%s %s" .Artist .Album | urlquery }}
#research-link spotify https://open.spotify.com/search/{{ printf "%s %s" .Artist .Album | urlquery }}
#research-link apple-music https://music.apple.com/search?term={{ printf "%s %s" .Artist .Album | urlquery }}
#research-link youtube-music https://music.youtube.com/search?q={{ printf "%s %s" .Artist .Album | urlquery }}
#research-link beatport https://www.beatport.com/search?q={{ printf "%s %s" .Artist .Album | urlquery }}
#research-link traxsource https://www.traxsource.com/search?term={{ printf "%s %s" .Artist .Album | urlquery }}
#research-link soundcloud https://soundcloud.com/search?q={{ printf "%s %s" .Artist .Album | urlquery }}
#research-link amazon-music https://music.amazon.com/search/{{ printf "%s %s" .Artist .Album | urlquery }}
#research-link allmusic https://www.allmusic.com/search/all/{{ printf "%s %s" .Artist .Album | urlquery }}
#research-link metal-archives https://www.metal-archives.com/search/advanced/searching/albums?bandName={{ .Artist | urlquery }}&releaseTitle={{ .Album | urlquery }}
#research-link prog-archives www.progarchives.com/google-search-results.asp?cx=artists&q={{ printf "%s %s" .Artist .Album | urlquery }}
#research-link cdandlp https://www.cdandlp.com/en/search/?q={{ printf "%s %s" .Artist .Album | urlquery }}&barcode={{ .Barcode | urlquery }}
#research-link classical-archives https://www.classicalarchives.com/search.html?c=all&q={{ printf "%s %s" .Artist .Album | urlquery }}
#research-link musicstack https://www.musicstack.com/show.cgi?filter_submit=1&find={{ .Artist | urlquery }}&t={{ .Album | urlquery }}&barcode={{ .Barcode | urlquery }}&search=Search
#research-link tidal https://tidal.com/search?q={{ printf "%s %s" .Artist .Album | urlquery }}
#research-link qobuz https://www.qobuz.com/us-en/search?q={{ printf "%s %s" .Artist .Album | urlquery }}

# add notification uri that are triggered by various events
# see all available services here https://containrrr.dev/shoutrrr/v0.8/services/generic/
# possible events are complete, needs-input, sync-complete, sync-error
# optional "suppress-after-action" prevents notifications for specified duration after manual actions

#notification-uri complete,needs-input,sync-error smtp://username:password@host:port/?from=from@example.com&to=recipient@example.com suppress-after-action 30s
#notification-uri complete,sync-complete          generic+https://my.subsonic.com/rest/startScan.view?c=wrtag&v=1.16&u=user&p=password

# set a list of files to keep when moving or copying

#keep-file origin.yaml
#keep-file log.cue

# custom tag diff weights can be provided to customise how the scoring algorithm weights certain tags when diffing. the default weight of any
# tag is 1, so provide a float <1 for less weight, and >1 for more weight. a weight of 0 means ignore the tag completely.
# like any other array like config option, it can be repeated for multiple diff weights

#diff-weight media format 0.5
#diff-weight catalogue num 1.2

# custom tag configs specify rules to change the tag set which is written by wrtag. by default, all tags are dropped, the default set is written,
# then some are kept from the previous tags (for example replaygain settings, lyrics, comments, and encoder tags). to extend the list
# of tags which are kept, add use the `keep` operation. to not write any tags from the default set, or overwrite the default keep list, use
# `drop` operation

#tag-config keep my_tag
#tag-config keep my_other_tag
#tag-config drop genre
#tag-config drop genres

# addons add external metadata to tracks after a musicbrainz match. can be used when importing for web, sync cli, or normal cli.
# addons can have have arguments too. for example "addon replaygain true-peak" or "addon replaygain force".

#addon lyrics genius musixmatch
#addon replaygain
#addon subproc my-command args <files>
